{"version":3,"file":"index.modern.js","sources":["../src/misc/timestamp-parser.ts","../src/misc/document-parser.ts","../src/misc/arrayHelpers.ts","../src/misc/objectFlatten.ts","../src/misc/logger/logger-base.ts","../src/misc/logger/logger.ts","../src/misc/logger/firestore-logger.ts","../src/misc/file-parser.ts","../src/misc/pathHelper.ts","../src/providers/database/firebase/FirebaseWrapper.ts","../src/providers/database/ResourceManager.ts","../src/providers/database/FireClient.ts","../src/misc/metadata-parser.ts","../src/providers/lazy-loading/queryCursors.ts","../src/providers/lazy-loading/paramsToQuery.ts","../src/providers/lazy-loading/FirebaseLazyLoadingClient.ts","../src/providers/DataProvider.ts","../src/misc/status-code-translator.ts","../src/providers/queries/GetList.ts","../src/providers/queries/GetOne.ts","../src/providers/queries/GetMany.ts","../src/providers/queries/GetManyReference.ts","../src/providers/commands/Update.ts","../src/providers/commands/UpdateMany.ts","../src/providers/commands/Create.ts","../src/providers/commands/Delete.ts","../src/providers/commands/Delete.Soft.ts","../src/providers/commands/DeleteMany.ts","../src/providers/commands/DeleteMany.Soft.ts","../src/providers/AuthProvider.ts"],"sourcesContent":["export function parseAllDatesDoc(obj: any) {\r\n  const isObject = !!obj && typeof obj === 'object';\r\n  if (!isObject) {\r\n    return;\r\n  }\r\n  Object.keys(obj).map(key => {\r\n    const value = obj[key];\r\n    obj[key] = recusivelyCheckObjectValue(value);\r\n  });\r\n}\r\n\r\nexport function recusivelyCheckObjectValue(input: any): any {\r\n  const isFalsey = !input;\r\n  if (isFalsey) {\r\n    return input;\r\n  }\r\n  const isPrimitive = typeof input !== 'object';\r\n  if (isPrimitive) {\r\n    return input;\r\n  }\r\n  const isTimestamp = !!input.toDate && typeof input.toDate === 'function';\r\n  if (isTimestamp) {\r\n    return input.toDate();\r\n  }\r\n  const isArray = Array.isArray(input);\r\n  if (isArray) {\r\n    return (input as []).map(value => recusivelyCheckObjectValue(value));\r\n  }\r\n  const isObject = typeof input === 'object';\r\n  if (isObject) {\r\n    Object.keys(input).map(key => {\r\n      const value = input[key];\r\n      input[key] = recusivelyCheckObjectValue(value);\r\n    });\r\n    return input;\r\n  }\r\n}\r\n","import { QueryDocumentSnapshot } from '@firebase/firestore-types';\r\nimport { parseAllDatesDoc } from './timestamp-parser';\r\n\r\nexport const parseFireStoreDocument = (doc: QueryDocumentSnapshot) => {\r\n  const data = doc.data();\r\n  parseAllDatesDoc(data);\r\n  // React Admin requires an id field on every document,\r\n  // So we can just using the firestore document id\r\n  return { id: doc.id, ...data };\r\n};\r\n","import { get, isEmpty } from 'lodash';\r\nimport { getFieldReferences, SearchObj } from './objectFlatten';\r\n\r\nexport function sortArray(\r\n  data: Array<{}>,\r\n  field: string,\r\n  dir: 'asc' | 'desc'\r\n): void {\r\n  data.sort((a: {}, b: {}) => {\r\n    const rawA = get(a, field);\r\n    const rawB = get(b, field);\r\n    const isAsc = dir === \"asc\";\r\n\r\n    const isNumberField = Number.isFinite(rawA) && Number.isFinite(rawB);\r\n    if (isNumberField) {\r\n      return basicSort(rawA, rawB, isAsc);\r\n    }\r\n    const isStringField = typeof rawA === 'string' && typeof rawB === 'string';\r\n    if (isStringField) {\r\n      const aParsed = rawA.toLowerCase();\r\n      const bParsed = rawB.toLowerCase();\r\n      return basicSort(aParsed, bParsed, isAsc);\r\n    }\r\n    const isDateField = rawA instanceof Date && rawB instanceof Date;\r\n    if (isDateField) {\r\n      return basicSort(rawA, rawB, isAsc);\r\n    }\r\n    return basicSort(!!rawA, !!rawB, isAsc);\r\n  });\r\n}\r\n\r\nfunction basicSort(aValue: any, bValue: any, isAsc: boolean) {\r\n  if (aValue > bValue) {\r\n    return isAsc ? 1 : -1;\r\n  }\r\n  if (aValue < bValue) {\r\n    return isAsc ? -1 : 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\nexport function filterArray(\r\n  data: Array<{}>,\r\n  searchFields?: { [field: string]: string | number | boolean | null }\r\n): Array<{}> {\r\n  if (!searchFields || isEmpty(searchFields)) {\r\n    return data;\r\n  }\r\n  const searchObjs: SearchObj[] = [];\r\n  Object.keys(searchFields).map((fieldName) => {\r\n    const fieldValue = searchFields[fieldName];\r\n    const getSubObjects = getFieldReferences(fieldName, fieldValue);\r\n    searchObjs.push(...getSubObjects);\r\n  });\r\n  const filtered = data.filter((row) =>\r\n    searchObjs.reduce((acc, cur) => {\r\n      const res = doesRowMatch(row, cur.searchField, cur.searchValue);\r\n      return res && acc;\r\n    }, true as boolean)\r\n  );\r\n  return filtered;\r\n}\r\n\r\nexport function doesRowMatch(\r\n  row: {},\r\n  searchField: string,\r\n  searchValue: any\r\n): boolean {\r\n  const searchThis = get(row, searchField);\r\n  const bothAreFalsey = !searchThis && !searchValue;\r\n  if (bothAreFalsey) {\r\n    return true;\r\n  }\r\n  const nothingToSearch = !searchThis;\r\n  if (nothingToSearch) {\r\n    return false;\r\n  }\r\n  const isStringSearch = typeof searchValue === 'string';\r\n  if (isStringSearch) {\r\n    return searchThis\r\n      .toString()\r\n      .toLowerCase()\r\n      .includes(searchValue.toLowerCase());\r\n  }\r\n  const isBooleanOrNumber =\r\n    typeof searchValue === 'boolean' || typeof searchValue === 'number';\r\n  if (isBooleanOrNumber) {\r\n    return searchThis === searchValue;\r\n  }\r\n  return false;\r\n}\r\n","export interface SearchObj {\r\n  searchField: string;\r\n  searchValue: number | string | boolean | null;\r\n}\r\nexport function getFieldReferences(\r\n  fieldName: string,\r\n  value: {} | number | string | boolean | null\r\n): SearchObj[] {\r\n  const isFalsy = !value;\r\n  const isSimple = isFalsy ||\r\n    typeof value === 'string' ||\r\n    typeof value === 'number' ||\r\n    typeof value === 'boolean';\r\n\r\n  if (isSimple) {\r\n    return [\r\n      {\r\n        searchField: fieldName,\r\n        searchValue: value as number | string | boolean | null,\r\n      },\r\n    ];\r\n  }\r\n  const tree = {} as any;\r\n  tree[fieldName] = value;\r\n  return objectFlatten(tree);\r\n}\r\n\r\nexport function objectFlatten(tree: {}): SearchObj[] {\r\n  var leaves: SearchObj[] = [];\r\n  var recursivelyWalk = function (obj: any, path: string | null) {\r\n    path = path || \"\";\r\n    for (var key in obj) {\r\n      if (obj.hasOwnProperty(key)) {\r\n        const objVal = obj && obj[key];\r\n        const currentPath = !!path ? path + \".\" + key : key;\r\n        const isWalkable =\r\n          typeof objVal === 'object' || objVal instanceof Array;\r\n        if (isWalkable) {\r\n          recursivelyWalk(objVal, currentPath);\r\n        } else {\r\n          leaves.push({ searchField: currentPath, searchValue: objVal });\r\n        }\r\n      }\r\n    }\r\n  };\r\n  recursivelyWalk(tree, null);\r\n  return leaves;\r\n}\r\n","type LogFn = (...args: any) => void;\r\n\r\nexport const LogNoOp: LogFn = (...args: any) => null;\r\n\r\nexport class LoggerBase {\r\n  constructor(private title: string, private cacheEnabledKey: string) {}\r\n\r\n  private isEnabled() {\r\n    return !!localStorage.getItem(this.cacheEnabledKey);\r\n  }\r\n\r\n  SetEnabled(isEnabled: boolean) {\r\n    if (isEnabled) {\r\n      localStorage.setItem(this.cacheEnabledKey, 'true');\r\n    } else {\r\n      localStorage.removeItem(this.cacheEnabledKey);\r\n    }\r\n  }\r\n\r\n  public get log() {\r\n    if (!this.isEnabled()) {\r\n      return LogNoOp;\r\n    }\r\n    const boundLogFn: (...args: any) => void = console.log.bind(\r\n      console,\r\n      this.title\r\n    );\r\n    return boundLogFn;\r\n  }\r\n\r\n  public get warn() {\r\n    if (!this.isEnabled()) {\r\n      return LogNoOp;\r\n    }\r\n    const boundLogFn: (...args: any) => void = console.warn.bind(\r\n      console,\r\n      this.title\r\n    );\r\n    return boundLogFn;\r\n  }\r\n\r\n  public get error() {\r\n    if (!this.isEnabled()) {\r\n      return LogNoOp;\r\n    }\r\n    const boundLogFn: (...args: any) => void = console.error.bind(\r\n      console,\r\n      this.title\r\n    );\r\n    return boundLogFn;\r\n  }\r\n}\r\n","import { LoggerBase } from './logger-base';\r\n\r\nconst LOGGER_ENABLEDKEY = 'LOGGING_ENABLED';\r\nexport const logger = new LoggerBase('ðŸ”¥raf:', LOGGER_ENABLEDKEY);\r\n\r\nexport const log = logger.log;\r\nexport const logError = logger.error;\r\nexport const logWarn = logger.warn;\r\n","import { RAFirebaseOptions } from 'providers/options';\r\nimport { LogNoOp, LoggerBase } from './logger-base';\r\n\r\nconst LOGGER_ENABLEDKEY = 'LOGGING_FIRESTORE_COSTS_ENABLED';\r\nconst logger = new LoggerBase('ðŸ’¸firestore-costs:', LOGGER_ENABLEDKEY);\r\n\r\nconst KEY_SINGLE = 'firecosts-single-reads';\r\n\r\nexport interface IFirestoreLogger {\r\n  logDocument: (count: number) => Function;\r\n  SetEnabled: (isEnabled: boolean) => void;\r\n  ResetCount: (shouldReset: boolean) => void;\r\n}\r\n\r\nexport function MakeFirestoreLogger(\r\n  options: RAFirebaseOptions\r\n): IFirestoreLogger {\r\n  function notEnabled() {\r\n    return !options?.lazyLoading?.enabled;\r\n  }\r\n\r\n  function incrementRead(incrementBy = 1) {\r\n    const currentCountRaw = localStorage.getItem(KEY_SINGLE) || '';\r\n    const currentCount = parseInt(currentCountRaw) || 0;\r\n    const incremented = currentCount + incrementBy;\r\n    localStorage.setItem(KEY_SINGLE, incremented + '');\r\n    return incremented;\r\n  }\r\n  function clearCache() {\r\n    localStorage.removeItem(KEY_SINGLE);\r\n  }\r\n  return {\r\n    SetEnabled(isEnabled: boolean) {\r\n      logger.SetEnabled(isEnabled);\r\n    },\r\n    ResetCount(shouldReset: boolean) {\r\n      shouldReset && clearCache()\r\n    },\r\n    logDocument(docCount: number) {\r\n      if (notEnabled()) {\r\n        return LogNoOp;\r\n      }\r\n      const count = incrementRead(docCount);\r\n      const suffix = `+${docCount} (session total=${count} documents read)`;\r\n      const boundLogFn: (...args: any) => void = logger.log.bind(\r\n        console,\r\n        suffix\r\n      );\r\n      return boundLogFn;\r\n    },\r\n  };\r\n}\r\n","import { logError } from './logger';\r\nimport { IFirebaseWrapper } from '../providers/database/firebase/IFirebaseWrapper';\r\n\r\ninterface ParsedUpload {\r\n  fieldDotsPath: string;\r\n  fieldSlashesPath: string;\r\n  rawFile: File | any;\r\n}\r\n\r\nexport function parseDocGetAllUploads(obj: any): ParsedUpload[] {\r\n  const isObject = !!obj && typeof obj === \"object\";\r\n  if (!isObject) {\r\n    return [];\r\n  }\r\n  const uploads: ParsedUpload[] = [];\r\n  Object.keys(obj).map((key) => {\r\n    const value = obj[key];\r\n    recusivelyParseObjectValue(value, key, uploads);\r\n  });\r\n  return uploads;\r\n}\r\n\r\nexport function recusivelyParseObjectValue(\r\n  input: any,\r\n  fieldPath: string,\r\n  uploads: ParsedUpload[]\r\n): any {\r\n  const isFalsey = !input;\r\n  if (isFalsey) {\r\n    return input;\r\n  }\r\n  const isPrimitive = typeof input !== 'object';\r\n  if (isPrimitive) {\r\n    return input;\r\n  }\r\n  const isTimestamp = !!input.toDate && typeof input.toDate === 'function';\r\n  if (isTimestamp) {\r\n    return input.toDate();\r\n  }\r\n  const isArray = Array.isArray(input);\r\n  if (isArray) {\r\n    return (input as []).map((value, index) =>\r\n      recusivelyParseObjectValue(value, `${fieldPath}.${index}`, uploads)\r\n    );\r\n  }\r\n  const isObject = typeof input === 'object';\r\n  if (!isObject) {\r\n    return;\r\n  }\r\n  const isFileField = !!input && input.hasOwnProperty('rawFile');\r\n  if (isFileField) {\r\n    uploads.push({\r\n      fieldDotsPath: fieldPath,\r\n      fieldSlashesPath: fieldPath.split('.').join('/'),\r\n      rawFile: input.rawFile\r\n    });\r\n    delete input.rawFile;\r\n    return;\r\n  }\r\n  Object.keys(input).map((key) => {\r\n    const value = input[key];\r\n    recusivelyParseObjectValue(value, `${fieldPath}.${key}`, uploads);\r\n  });\r\n  return input;\r\n}\r\n\r\nexport const recursivelyMapStorageUrls = async (\r\n  fireWrapper: IFirebaseWrapper,\r\n  fieldValue: any\r\n): Promise<any> => {\r\n  const isArray = Array.isArray(fieldValue);\r\n  const isObject = !isArray && typeof fieldValue === \"object\";\r\n  const isFileField = isObject && !!fieldValue && fieldValue.hasOwnProperty(\"src\");\r\n  if (isFileField) {\r\n    const isAlreadyUploaded = fieldValue.src.startsWith('https://');\r\n    if (isAlreadyUploaded) {\r\n      return fieldValue;\r\n    }\r\n    let ref: firebase.storage.Reference = null as any;\r\n    try {\r\n      ref = fireWrapper.storage().ref(fieldValue.src);\r\n      const src = await ref.getDownloadURL();\r\n      return {\r\n        ...fieldValue,\r\n        src\r\n      };\r\n    } catch (error) {\r\n      logError(`Error when getting download URL`, {\r\n        error,\r\n        fieldValue,\r\n        ref\r\n      });\r\n      return fieldValue;\r\n    }\r\n  } else if (isObject) {\r\n    for (let key in fieldValue) {\r\n      if (fieldValue.hasOwnProperty(key)) {\r\n        const value = fieldValue[key];\r\n        fieldValue[key] = await recursivelyMapStorageUrls(fireWrapper, value);\r\n      }\r\n    }\r\n\r\n    return fieldValue;\r\n  } else if (isArray) {\r\n    for (let i = 0; i < fieldValue.length; i++) {\r\n      fieldValue[i] = await recursivelyMapStorageUrls(fireWrapper, fieldValue[i])\r\n    }\r\n\r\n    return fieldValue;\r\n  }\r\n\r\n  return fieldValue;\r\n};\r\n","import path from \"path-browserify\";\r\n\r\nexport function getAbsolutePath(\r\n  rootRef: undefined | string | (() => string),\r\n  relativePath: string | null\r\n): string {\r\n  if (!rootRef) {\r\n    return relativePath+'';\r\n  }\r\n  if (!relativePath) {\r\n    throw new Error(\r\n      \"Resource name must be a string of length greater than 0 characters\"\r\n    );\r\n  }\r\n  const rootRefValue = typeof rootRef === \"string\" ? rootRef : rootRef();\r\n  const withSlashes = path.join(\"/\", rootRefValue, \"/\", relativePath, \"/\");\r\n  const slashCount = withSlashes.split(\"/\").length - 1;\r\n  if (slashCount % 2) {\r\n    throw new Error(`The rootRef path must point to a \"document\"\r\n    not a \"collection\"e.g. /collection/document/ or\r\n    /collection/document/collection/document/`);\r\n  }\r\n  return withSlashes.slice(1, -1);\r\n}\r\n\r\nexport function joinPaths(...args: string[]) {\r\n  return path.join(...args);\r\n}\r\n","import { FireApp, IFirebaseWrapper } from './IFirebaseWrapper';\r\n\r\nimport * as firebase from 'firebase/app';\r\nimport { User } from 'firebase/app';\r\nimport 'firebase/firestore';\r\nimport { getFirestore } from '@firebase/firestore';\r\nimport 'firebase/auth';\r\nimport 'firebase/storage';\r\nimport { log } from 'misc';\r\nimport { RAFirebaseOptions } from 'providers/options';\r\n\r\nexport class FirebaseWrapper implements IFirebaseWrapper {\r\n  private firestore: firebase.firestore.Firestore = null as any;\r\n  private app: FireApp = null as any;\r\n  public options: RAFirebaseOptions = {};\r\n\r\n  public GetApp(): FireApp {\r\n    return this.app;\r\n  }\r\n\r\n  constructor() {}\r\n\r\n  public init(firebaseConfig: {}, options?: RAFirebaseOptions): void {\r\n    const optionsSafe = options || {};\r\n    this.options = optionsSafe;\r\n    this.app = ObtainFirebaseApp(firebaseConfig, optionsSafe);\r\n    this.firestore = firebase.firestore(this.app)\r\n  }\r\n  public db(): firebase.firestore.Firestore {\r\n    return this.firestore;\r\n  }\r\n  public serverTimestamp() {\r\n    // This line doesn't work for some reason, might be firebase sdk.\r\n    // return firebase.firestore.FieldValue.serverTimestamp();\r\n    return new Date();\r\n  }\r\n  public auth() {\r\n    return this.app.auth() as any;\r\n  }\r\n  public storage() {\r\n    return this.app.storage();\r\n  }\r\n  public async GetUserLogin(): Promise<User> {\r\n    return new Promise((resolve, reject) => {\r\n      this.app.auth().onAuthStateChanged((user) => {\r\n        if (user) {\r\n          resolve(user);\r\n        } else {\r\n          reject('getUserLogin() no user logged in');\r\n        }\r\n      });\r\n    });\r\n  }\r\n  public OnUserLogout(callBack: (u: firebase.User | null) => any) {\r\n    this.app.auth().onAuthStateChanged((user) => {\r\n      const isLoggedOut = !user;\r\n      log('FirebaseWrapper.OnUserLogout', { user, isLoggedOut });\r\n      if (isLoggedOut) {\r\n        callBack(user);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction ObtainFirebaseApp(\r\n  firebaseConfig: {},\r\n  options: RAFirebaseOptions\r\n): firebase.app.App {\r\n  if (options.app) {\r\n    return options.app;\r\n  }\r\n  const isInitialized = !!firebase.apps.length;\r\n  if (isInitialized) {\r\n    return firebase.app();\r\n  } else {\r\n    return firebase.initializeApp(firebaseConfig);\r\n  }\r\n}\r\n","// Firebase types\r\nimport {\r\n  CollectionReference,\r\n  QueryDocumentSnapshot,\r\n  FirebaseFirestore,\r\n} from '@firebase/firestore-types';\r\nimport { RAFirebaseOptions } from '../options';\r\nimport { IFirebaseWrapper } from './firebase/IFirebaseWrapper';\r\nimport {\r\n  log,\r\n  getAbsolutePath,\r\n  messageTypes,\r\n  parseAllDatesDoc,\r\n  logWarn,\r\n  IFirestoreLogger,\r\n} from '../../misc';\r\n\r\nexport interface IResource {\r\n  path: string;\r\n  pathAbsolute: string;\r\n  collection: CollectionReference;\r\n  list: Array<{} & { deleted?: boolean }>;\r\n}\r\n\r\nexport class ResourceManager {\r\n  private resources: {\r\n    [resourceName: string]: IResource;\r\n  } = {};\r\n\r\n  private db: FirebaseFirestore;\r\n\r\n  constructor(\r\n    private fireWrapper: IFirebaseWrapper,\r\n    private options: RAFirebaseOptions,\r\n    private flogger: IFirestoreLogger\r\n  ) {\r\n    this.db = fireWrapper.db();\r\n\r\n    this.fireWrapper.OnUserLogout(() => {\r\n      this.resources = {};\r\n    });\r\n  }\r\n\r\n  public async TryGetResource(\r\n    resourceName: string,\r\n    refresh?: 'REFRESH',\r\n    collectionQuery?: messageTypes.CollectionQueryType\r\n  ): Promise<IResource> {\r\n    if (refresh) {\r\n      await this.RefreshResource(resourceName, collectionQuery);\r\n    }\r\n    return this.TryGetResourcePromise(resourceName, collectionQuery);\r\n  }\r\n\r\n  public GetResource(relativePath: string): IResource {\r\n    const resource: IResource = this.resources[relativePath];\r\n    if (!resource) {\r\n      throw new Error(\r\n        `react-admin-firebase: Can't find resource: \"${relativePath}\"`\r\n      );\r\n    }\r\n    return resource;\r\n  }\r\n\r\n  public async TryGetResourcePromise(\r\n    relativePath: string,\r\n    collectionQuery?: messageTypes.CollectionQueryType\r\n  ): Promise<IResource> {\r\n    log('resourceManager.TryGetResourcePromise', {\r\n      relativePath,\r\n      collectionQuery,\r\n    });\r\n    await this.initPath(relativePath);\r\n\r\n    const resource: IResource = this.resources[relativePath];\r\n    if (!resource) {\r\n      throw new Error(\r\n        `react-admin-firebase: Cant find resource: \"${relativePath}\"`\r\n      );\r\n    }\r\n    return resource;\r\n  }\r\n\r\n  public async RefreshResource(\r\n    relativePath: string,\r\n    collectionQuery: messageTypes.CollectionQueryType | undefined\r\n  ) {\r\n    if (this.options?.lazyLoading?.enabled) {\r\n      logWarn('resourceManager.RefreshResource', {\r\n        warn: 'RefreshResource is not available in lazy loading mode',\r\n      });\r\n      throw new Error(\r\n        'react-admin-firebase: RefreshResource is not available in lazy loading mode'\r\n      );\r\n    }\r\n\r\n    log('resourceManager.RefreshResource', { relativePath, collectionQuery });\r\n    await this.initPath(relativePath);\r\n    const resource = this.resources[relativePath];\r\n\r\n    const collection = resource.collection;\r\n    const query = this.applyQuery(collection, collectionQuery);\r\n    const newDocs = await query.get();\r\n\r\n    resource.list = newDocs.docs.map((doc) => this.parseFireStoreDocument(doc));\r\n    const count = newDocs.docs.length;\r\n    this.flogger.logDocument(count)();\r\n    log('resourceManager.RefreshResource', {\r\n      newDocs,\r\n      resource,\r\n      collectionPath: collection.path,\r\n    });\r\n  }\r\n\r\n  public async GetSingleDoc(relativePath: string, docId: string) {\r\n    await this.initPath(relativePath);\r\n    const resource = this.GetResource(relativePath);\r\n    this.flogger.logDocument(1)();\r\n    const docSnap = await resource.collection.doc(docId).get();\r\n    if (!docSnap.exists) {\r\n      throw new Error('react-admin-firebase: No id found matching: ' + docId);\r\n    }\r\n    const result = this.parseFireStoreDocument(docSnap as any);\r\n    log('resourceManager.GetSingleDoc', {\r\n      relativePath,\r\n      resource,\r\n      docId,\r\n      docSnap,\r\n      result,\r\n    });\r\n    return result;\r\n  }\r\n\r\n  private async initPath(relativePath: string): Promise<void> {\r\n    const rootRef = this.options && this.options.rootRef;\r\n    const absolutePath = getAbsolutePath(rootRef, relativePath);\r\n    const hasBeenInited = !!this.resources[relativePath];\r\n    log('resourceManager.initPath()', {\r\n      absolutePath,\r\n      hasBeenInited,\r\n    });\r\n    if (hasBeenInited) {\r\n      log('resourceManager.initPath() has been initialized already...');\r\n      return;\r\n    }\r\n    const collection = this.db.collection(absolutePath);\r\n    const list: Array<{}> = [];\r\n    const resource: IResource = {\r\n      collection,\r\n      list,\r\n      path: relativePath,\r\n      pathAbsolute: absolutePath,\r\n    };\r\n    this.resources[relativePath] = resource;\r\n    log('resourceManager.initPath() setting resource...', {\r\n      resource,\r\n      allResources: this.resources,\r\n      collection: collection,\r\n      collectionPath: collection.path,\r\n    });\r\n  }\r\n\r\n  private parseFireStoreDocument(doc: QueryDocumentSnapshot | undefined): {} {\r\n    if (!doc) {\r\n      logWarn('parseFireStoreDocument: no doc', { doc });\r\n      return {};\r\n    }\r\n    const data = doc.data();\r\n    parseAllDatesDoc(data);\r\n    // React Admin requires an id field on every document,\r\n    // So we can just using the firestore document id\r\n    return { id: doc.id, ...data };\r\n  }\r\n\r\n  public async getUserIdentifier(): Promise<string> {\r\n    const identifier = this.options.associateUsersById\r\n      ? await this.getCurrentUserId()\r\n      : await this.getCurrentUserEmail();\r\n    return identifier;\r\n  }\r\n\r\n  private async getCurrentUserEmail() {\r\n    const user = await this.fireWrapper.GetUserLogin();\r\n    if (user) {\r\n      return user.email as string;\r\n    } else {\r\n      return 'annonymous user';\r\n    }\r\n  }\r\n  private async getCurrentUserId() {\r\n    const user = await this.fireWrapper.GetUserLogin();\r\n    if (user) {\r\n      return user.uid;\r\n    } else {\r\n      return 'annonymous user';\r\n    }\r\n  }\r\n\r\n  private applyQuery(\r\n    collection: CollectionReference,\r\n    collectionQuery?: messageTypes.CollectionQueryType\r\n  ): CollectionReference {\r\n    const collRef: CollectionReference = collectionQuery\r\n      ? collectionQuery(collection)\r\n      : collection;\r\n\r\n    log('resourceManager.applyQuery() ...', {\r\n      collection,\r\n      collectionQuery: (collectionQuery || '-').toString(),\r\n      collRef,\r\n    });\r\n    return collRef;\r\n  }\r\n}\r\n","import { set } from \"lodash\";\r\nimport {\r\n  AddCreatedByFields,\r\n  AddUpdatedByFields,\r\n  IFirestoreLogger,\r\n  joinPaths,\r\n  log,\r\n  logError,\r\n  parseDocGetAllUploads,\r\n} from \"../../misc\";\r\nimport { RAFirebaseOptions } from \"../options\";\r\nimport { IFirebaseWrapper } from \"./firebase/IFirebaseWrapper\";\r\nimport { IResource, ResourceManager } from \"./ResourceManager\";\r\n\r\nexport class FireClient {\r\n  public rm: ResourceManager;\r\n  public db() {\r\n    return this.fireWrapper.db();\r\n  }\r\n\r\n  constructor(\r\n    public fireWrapper: IFirebaseWrapper,\r\n    public options: RAFirebaseOptions,\r\n    public flogger: IFirestoreLogger\r\n  ) {\r\n    this.rm = new ResourceManager(this.fireWrapper, this.options, this.flogger);\r\n  }\r\n\r\n  public checkRemoveIdField(obj: any, docId: string) {\r\n    if (!this.options.dontAddIdFieldToDoc) {\r\n      obj.id = docId;\r\n    }\r\n  }\r\n\r\n  public async parseDataAndUpload(r: IResource, id: string, data: any) {\r\n    if (!data) {\r\n      return data;\r\n    }\r\n    const docPath = r.collection.doc(id).path;\r\n\r\n    const uploads = parseDocGetAllUploads(data);\r\n    await Promise.all(\r\n      uploads.map(async (u) => {\r\n        const link = await this.uploadAndGetLink(\r\n          u.rawFile,\r\n          docPath,\r\n          u.fieldSlashesPath,\r\n          !!this.options.useFileNamesInStorage\r\n        );\r\n        set(data, u.fieldDotsPath + \".src\", link);\r\n      })\r\n    );\r\n    return data;\r\n  }\r\n\r\n  public async addCreatedByFields(obj: any) {\r\n    return AddCreatedByFields(obj, this.fireWrapper, this.rm, this.options);\r\n  }\r\n\r\n  public async addUpdatedByFields(obj: any) {\r\n    return AddUpdatedByFields(obj, this.fireWrapper, this.rm, this.options);\r\n  }\r\n\r\n  private async uploadAndGetLink(\r\n    rawFile: any,\r\n    docPath: string,\r\n    fieldPath: string,\r\n    useFileName: boolean\r\n  ): Promise<string | undefined> {\r\n    const storagePath = useFileName\r\n      ? joinPaths(docPath, fieldPath, rawFile.name)\r\n      : joinPaths(docPath, fieldPath);\r\n    return this.saveFile(storagePath, rawFile);\r\n  }\r\n\r\n  private async saveFile(\r\n    storagePath: string,\r\n    rawFile: any\r\n  ): Promise<string | undefined> {\r\n    log(\"saveFile() saving file...\", { storagePath, rawFile });\r\n    const task = this.fireWrapper.storage().ref(storagePath).put(rawFile);\r\n    try {\r\n      const taskResult: firebase.storage.UploadTaskSnapshot = await new Promise(\r\n        (res, rej) => task.then(res).catch(rej)\r\n      );\r\n      const getDownloadURL = await taskResult.ref.getDownloadURL();\r\n      log(\"saveFile() saved file\", {\r\n        storagePath,\r\n        taskResult,\r\n        getDownloadURL,\r\n      });\r\n      return this.options.relativeFilePaths ? storagePath : getDownloadURL;\r\n    } catch (storageError) {\r\n      if (storageError.code === \"storage/unknown\") {\r\n        logError(\r\n          'saveFile() error saving file, No bucket found! Try clicking \"Get Started\" in firebase -> storage',\r\n          { storageError }\r\n        );\r\n      } else {\r\n        logError(\"saveFile() error saving file\", {\r\n          storageError,\r\n        });\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { RAFirebaseOptions } from \"index\";\r\nimport { IFirebaseWrapper, ResourceManager } from \"providers/database\";\r\n\r\nexport async function AddCreatedByFields(\r\n  obj: any,\r\n  fireWrapper: IFirebaseWrapper,\r\n  rm: Pick<ResourceManager, \"getUserIdentifier\">,\r\n  options: Pick<\r\n    RAFirebaseOptions,\r\n    | \"associateUsersById\"\r\n    | \"disableMeta\"\r\n    | \"renameMetaFields\"\r\n    | \"metaFieldCasing\"\r\n  >\r\n) {\r\n  if (options.disableMeta) {\r\n    return;\r\n  }\r\n  const currentUserIdentifier = await rm.getUserIdentifier();\r\n  const createAtSelector = GetSelectorsCreateAt(options);\r\n  const createBySelector = GetSelectorsCreateBy(options);\r\n  obj[createAtSelector] = fireWrapper.serverTimestamp();\r\n  obj[createBySelector] = currentUserIdentifier;\r\n}\r\n\r\nexport async function AddUpdatedByFields(\r\n  obj: any,\r\n  fireWrapper: IFirebaseWrapper,\r\n  rm: Pick<ResourceManager, \"getUserIdentifier\">,\r\n  options: Pick<\r\n    RAFirebaseOptions,\r\n    | \"associateUsersById\"\r\n    | \"disableMeta\"\r\n    | \"renameMetaFields\"\r\n    | \"metaFieldCasing\"\r\n  >\r\n) {\r\n  if (options.disableMeta) {\r\n    return;\r\n  }\r\n  const currentUserIdentifier = await rm.getUserIdentifier();\r\n  const updateAtSelector = GetSelectorsUpdateAt(options);\r\n  const updateBySelector = GetSelectorsUpdateBy(options);\r\n  obj[updateAtSelector] = fireWrapper.serverTimestamp();\r\n  obj[updateBySelector] = currentUserIdentifier;\r\n}\r\n\r\nexport function GetSelectorsUpdateAt(\r\n  options: Pick<RAFirebaseOptions, \"metaFieldCasing\" | \"renameMetaFields\">\r\n): string {\r\n  if (options.renameMetaFields && options.renameMetaFields.updated_at) {\r\n    return options.renameMetaFields.updated_at;\r\n  }\r\n  const casing = options.metaFieldCasing;\r\n  const defautCase = \"lastupdate\";\r\n  if (!casing) {\r\n    return defautCase;\r\n  }\r\n  if (casing === \"camel\") {\r\n    return \"lastUpdate\";\r\n  }\r\n  if (casing === \"snake\") {\r\n    return \"last_update\";\r\n  }\r\n  if (casing === \"pascal\") {\r\n    return \"LastUpdate\";\r\n  }\r\n  if (casing === \"kebab\") {\r\n    return \"last-update\";\r\n  }\r\n  return defautCase;\r\n}\r\n\r\nexport function GetSelectorsUpdateBy(\r\n  options: Pick<RAFirebaseOptions, \"metaFieldCasing\" | \"renameMetaFields\">\r\n): string {\r\n  if (options.renameMetaFields && options.renameMetaFields.updated_by) {\r\n    return options.renameMetaFields.updated_by;\r\n  }\r\n  const casing = options.metaFieldCasing;\r\n  const defautCase = \"updatedby\";\r\n  if (!casing) {\r\n    return defautCase;\r\n  }\r\n  if (casing === \"camel\") {\r\n    return \"updatedBy\";\r\n  }\r\n  if (casing === \"snake\") {\r\n    return \"updated_by\";\r\n  }\r\n  if (casing === \"pascal\") {\r\n    return \"UpdatedBy\";\r\n  }\r\n  if (casing === \"kebab\") {\r\n    return \"updated-by\";\r\n  }\r\n  return defautCase;\r\n}\r\n\r\nexport function GetSelectorsCreateAt(\r\n  options: Pick<RAFirebaseOptions, \"metaFieldCasing\" | \"renameMetaFields\">\r\n): string {\r\n  if (options.renameMetaFields && options.renameMetaFields.created_at) {\r\n    return options.renameMetaFields.created_at;\r\n  }\r\n  const casing = options.metaFieldCasing;\r\n  const defautCase = \"createdate\";\r\n  if (!casing) {\r\n    return defautCase;\r\n  }\r\n  if (casing === \"camel\") {\r\n    return \"createDate\";\r\n  }\r\n  if (casing === \"snake\") {\r\n    return \"create_date\";\r\n  }\r\n  if (casing === \"pascal\") {\r\n    return \"CreateDate\";\r\n  }\r\n  if (casing === \"kebab\") {\r\n    return \"create-date\";\r\n  }\r\n  return defautCase;\r\n}\r\n\r\nexport function GetSelectorsCreateBy(\r\n  options: Pick<RAFirebaseOptions, \"metaFieldCasing\" | \"renameMetaFields\">\r\n): string {\r\n  if (options.renameMetaFields && options.renameMetaFields.created_by) {\r\n    return options.renameMetaFields.created_by;\r\n  }\r\n  const casing = options.metaFieldCasing;\r\n  const defautCase = \"createdby\";\r\n  if (!casing) {\r\n    return defautCase;\r\n  }\r\n  if (casing === \"camel\") {\r\n    return \"createdBy\";\r\n  }\r\n  if (casing === \"snake\") {\r\n    return \"created_by\";\r\n  }\r\n  if (casing === \"pascal\") {\r\n    return \"CreatedBy\";\r\n  }\r\n  if (casing === \"kebab\") {\r\n    return \"created-by\";\r\n  }\r\n  return defautCase;\r\n}\r\n","import {\r\n  CollectionReference,\r\n  DocumentSnapshot,\r\n  Query,\r\n} from '@firebase/firestore-types';\r\nimport { IFirestoreLogger, messageTypes } from '../../misc';\r\n\r\nexport function setQueryCursor(\r\n  doc: DocumentSnapshot,\r\n  params: messageTypes.IParamsGetList,\r\n  resourceName: string\r\n) {\r\n  const key = btoa(JSON.stringify({ ...params, resourceName }));\r\n  localStorage.setItem(key, doc.id);\r\n\r\n  const allCursorsKey = `ra-firebase-cursor-keys_${resourceName}`;\r\n  const localCursorKeys = localStorage.getItem(allCursorsKey);\r\n  if (!localCursorKeys) {\r\n    localStorage.setItem(allCursorsKey, JSON.stringify([key]));\r\n  } else {\r\n    const cursors: string[] = JSON.parse(localCursorKeys);\r\n    const newCursors = cursors.concat(key);\r\n    localStorage.setItem(allCursorsKey, JSON.stringify(newCursors));\r\n  }\r\n}\r\n\r\nexport async function getQueryCursor(\r\n  collection: CollectionReference,\r\n  params: messageTypes.IParamsGetList,\r\n  resourceName: string,\r\n  flogger: IFirestoreLogger\r\n): Promise<DocumentSnapshot | false> {\r\n  const key = btoa(JSON.stringify({ ...params, resourceName }));\r\n  const docId = localStorage.getItem(key);\r\n  if (!docId) {\r\n    return false;\r\n  }\r\n\r\n  const doc = await collection.doc(docId).get();\r\n  flogger.logDocument(1)();\r\n  if (doc.exists) {\r\n    // incrementFirebaseReadsCounter(1);\r\n    return doc;\r\n  }\r\n  return false;\r\n}\r\n\r\nexport function clearQueryCursors(resourceName: string) {\r\n  const allCursorsKey = `ra-firebase-cursor-keys_${resourceName}`;\r\n  const localCursorKeys = localStorage.getItem(allCursorsKey);\r\n  if (localCursorKeys) {\r\n    const cursors: string[] = JSON.parse(localCursorKeys);\r\n    cursors.forEach((cursor) => localStorage.removeItem(cursor));\r\n    localStorage.removeItem(allCursorsKey);\r\n  }\r\n}\r\n\r\nexport async function findLastQueryCursor(\r\n  collection: CollectionReference,\r\n  queryBase: Query,\r\n  params: messageTypes.IParamsGetList,\r\n  resourceName: string,\r\n  flogger: IFirestoreLogger\r\n) {\r\n  const { page, perPage } = params.pagination;\r\n\r\n  let lastQueryCursor: DocumentSnapshot | false = false;\r\n  let currentPage = page - 1;\r\n\r\n  const currentPageParams = {\r\n    ...params,\r\n    pagination: {\r\n      ...params.pagination,\r\n    },\r\n  };\r\n  while (!lastQueryCursor && currentPage > 1) {\r\n    currentPage--;\r\n    currentPageParams.pagination.page = currentPage;\r\n    console.log('getting query cursor currentPage=', currentPage);\r\n    lastQueryCursor = await getQueryCursor(\r\n      collection,\r\n      currentPageParams,\r\n      resourceName,\r\n      flogger\r\n    );\r\n  }\r\n  const limit = (page - currentPage) * perPage;\r\n  const isFirst = currentPage === 1;\r\n\r\n  function getQuery() {\r\n    if (isFirst) {\r\n      return queryBase.limit(limit);\r\n    } else {\r\n      return queryBase.startAt(lastQueryCursor).limit(limit);\r\n    }\r\n  }\r\n\r\n  const newQuery = getQuery();\r\n  const snapshots = await newQuery.get();\r\n  const docsLength = snapshots.docs.length;\r\n  flogger.logDocument(docsLength)();\r\n  const lastDocIndex = docsLength - 1;\r\n  const lastDocRef = snapshots.docs[lastDocIndex];\r\n  return lastDocRef;\r\n}\r\n","import {\r\n  CollectionReference,\r\n  OrderByDirection,\r\n  Query,\r\n} from '@firebase/firestore-types';\r\nimport { IFirestoreLogger, messageTypes } from '../../misc';\r\nimport { findLastQueryCursor, getQueryCursor } from './queryCursors';\r\n\r\ninterface ParamsToQueryOptions {\r\n  filters?: boolean;\r\n  sort?: boolean;\r\n  pagination?: boolean;\r\n}\r\n\r\nconst defaultParamsToQueryOptions = {\r\n  filters: true,\r\n  sort: true,\r\n  pagination: true,\r\n};\r\n\r\nexport async function paramsToQuery<\r\n  TParams extends messageTypes.IParamsGetList\r\n>(\r\n  collection: CollectionReference,\r\n  params: TParams,\r\n  resourceName: string,\r\n  flogger: IFirestoreLogger,\r\n  options: ParamsToQueryOptions = defaultParamsToQueryOptions\r\n): Promise<Query> {\r\n  const filtersStepQuery = options.filters\r\n    ? filtersToQuery(collection, params.filter)\r\n    : collection;\r\n\r\n  const sortStepQuery = options.sort\r\n    ? sortToQuery(filtersStepQuery, params.sort)\r\n    : filtersStepQuery;\r\n\r\n  return options.pagination\r\n    ? paginationToQuery(\r\n        sortStepQuery,\r\n        params,\r\n        collection,\r\n        resourceName,\r\n        flogger\r\n      )\r\n    : sortStepQuery;\r\n}\r\n\r\nexport function filtersToQuery(\r\n  query: Query,\r\n  filters: { [fieldName: string]: any }\r\n): Query {\r\n  Object.keys(filters).forEach((fieldName) => {\r\n    query = query.where(fieldName, '==', filters[fieldName]);\r\n  });\r\n  return query;\r\n}\r\n\r\nexport function sortToQuery(\r\n  query: Query,\r\n  sort: { field: string; order: string }\r\n): Query {\r\n  if (sort != null && sort.field !== 'id') {\r\n    const { field, order } = sort;\r\n    const parsedOrder = order.toLocaleLowerCase() as OrderByDirection;\r\n    query = query.orderBy(field, parsedOrder);\r\n  }\r\n  return query;\r\n}\r\n\r\nasync function paginationToQuery<TParams extends messageTypes.IParamsGetList>(\r\n  query: Query,\r\n  params: TParams,\r\n  collection: CollectionReference,\r\n  resourceName: string,\r\n  flogger: IFirestoreLogger\r\n): Promise<Query> {\r\n  const { page, perPage } = params.pagination;\r\n  if (page === 1) {\r\n    query = query.limit(perPage);\r\n  } else {\r\n    let queryCursor = await getQueryCursor(\r\n      collection,\r\n      params,\r\n      resourceName,\r\n      flogger\r\n    );\r\n    if (!queryCursor) {\r\n      queryCursor = await findLastQueryCursor(\r\n        collection,\r\n        query,\r\n        params,\r\n        resourceName,\r\n        flogger\r\n      );\r\n    }\r\n    query = query.startAfter(queryCursor).limit(perPage);\r\n  }\r\n\r\n  return query;\r\n}\r\n\r\nexport function getFullParamsForQuery<\r\n  TParams extends messageTypes.IParamsGetList\r\n>(reactAdminParams: TParams, softdeleteEnabled: boolean): TParams {\r\n  return {\r\n    ...reactAdminParams,\r\n    filter: softdeleteEnabled\r\n      ? {\r\n          deleted: false,\r\n          ...reactAdminParams.filter,\r\n        }\r\n      : reactAdminParams.filter,\r\n  };\r\n}\r\n\r\nexport function getNextPageParams<TParams extends messageTypes.IParamsGetList>(\r\n  params: TParams\r\n): TParams {\r\n  return {\r\n    ...params,\r\n    pagination: {\r\n      ...params.pagination,\r\n      page: params.pagination.page + 1,\r\n    },\r\n  };\r\n}\r\n","import {\r\n  log,\r\n  messageTypes,\r\n  parseFireStoreDocument,\r\n  recursivelyMapStorageUrls,\r\n} from '../../misc';\r\nimport {\r\n  CollectionReference,\r\n  DocumentSnapshot,\r\n} from '@firebase/firestore-types';\r\nimport { IResource, ResourceManager } from '../database/ResourceManager';\r\nimport { RAFirebaseOptions } from '../options';\r\nimport * as ra from '../../misc/react-admin-models';\r\nimport {\r\n  getFullParamsForQuery,\r\n  getNextPageParams,\r\n  paramsToQuery,\r\n} from './paramsToQuery';\r\nimport { clearQueryCursors, setQueryCursor } from './queryCursors';\r\nimport { FireClient } from 'providers/database';\r\n\r\nexport class FirebaseLazyLoadingClient {\r\n  constructor(\r\n    private readonly options: RAFirebaseOptions,\r\n    private readonly rm: ResourceManager,\r\n    private client: FireClient\r\n  ) {}\r\n\r\n  public async apiGetList<T extends ra.Record>(\r\n    resourceName: string,\r\n    reactAdminParams: ra.GetListParams\r\n  ): Promise<ra.GetListResult<T>> {\r\n    const r = await this.tryGetResource(resourceName);\r\n    const params = getFullParamsForQuery(\r\n      reactAdminParams,\r\n      !!this.options.softDelete\r\n    );\r\n\r\n    log('apiGetListLazy', { resourceName, params });\r\n\r\n    const query = await paramsToQuery(\r\n      r.collection,\r\n      params,\r\n      resourceName,\r\n      this.client.flogger\r\n    );\r\n\r\n    const snapshots = await query.get();\r\n\r\n    const resultsCount = snapshots.docs.length;\r\n    if (!resultsCount) {\r\n      log('apiGetListLazy', {\r\n        message: 'There are not records for given query',\r\n      });\r\n      return { data: [], total: 0 };\r\n    }\r\n    this.client.flogger.logDocument(resultsCount)();\r\n\r\n    const data = snapshots.docs.map(parseFireStoreDocument) as T[];\r\n    const nextPageCursor = snapshots.docs[snapshots.docs.length - 1];\r\n    // After fetching documents save queryCursor for next page\r\n    setQueryCursor(nextPageCursor, getNextPageParams(params), resourceName);\r\n    // Hardcoded to allow next pages, as we don't have total number of items\r\n    let total = 9000;\r\n\r\n    // Check for next pages\r\n    // If it's last page, we can count all items and disable going to next page\r\n    const isOnLastPage = await this.checkIfOnLastPage(\r\n      r.collection,\r\n      params,\r\n      resourceName,\r\n      nextPageCursor\r\n    );\r\n\r\n    if (isOnLastPage) {\r\n      const { page, perPage } = params.pagination;\r\n      total = (page - 1) * perPage + data.length;\r\n      log('apiGetListLazy', { message: \"It's last page of collection.\" });\r\n    }\r\n\r\n    if (this.options.relativeFilePaths) {\r\n      const parsedData = await Promise.all(\r\n        data.map(async (doc: any) => {\r\n          for (let fieldName in doc) {\r\n            doc[fieldName] = await recursivelyMapStorageUrls(\r\n              this.client.fireWrapper,\r\n              doc[fieldName]\r\n            );\r\n          }\r\n          return doc;\r\n        })\r\n      );\r\n\r\n      log('apiGetListLazy result', {\r\n        docs: parsedData,\r\n        resource: r,\r\n        collectionPath: r.collection.path,\r\n      });\r\n\r\n      return {\r\n        data: parsedData,\r\n        total,\r\n      };\r\n    }\r\n\r\n    log('apiGetListLazy result', {\r\n      docs: data,\r\n      resource: r,\r\n      collectionPath: r.collection.path,\r\n    });\r\n\r\n    return { data, total };\r\n  }\r\n\r\n  public async apiGetManyReference(\r\n    resourceName: string,\r\n    reactAdminParams: messageTypes.IParamsGetManyReference\r\n  ): Promise<messageTypes.IResponseGetManyReference> {\r\n    const r = await this.tryGetResource(resourceName);\r\n    log('apiGetManyReferenceLazy', {\r\n      resourceName,\r\n      resource: r,\r\n      reactAdminParams,\r\n    });\r\n    const filterWithTarget = {\r\n      ...reactAdminParams.filter,\r\n      [reactAdminParams.target]: reactAdminParams.id,\r\n    };\r\n    const params = getFullParamsForQuery(\r\n      {\r\n        ...reactAdminParams,\r\n        filter: filterWithTarget,\r\n      },\r\n      !!this.options.softDelete\r\n    );\r\n\r\n    const query = await paramsToQuery(\r\n      r.collection,\r\n      params,\r\n      resourceName,\r\n      this.client.flogger\r\n    );\r\n\r\n    const snapshots = await query.get();\r\n    const resultsCount = snapshots.docs.length;\r\n    this.client.flogger.logDocument(resultsCount)();\r\n    const data = snapshots.docs.map(parseFireStoreDocument);\r\n    if (this.options.relativeFilePaths) {\r\n      const parsedData = await Promise.all(\r\n        data.map(async (doc: any) => {\r\n          for (let fieldName in doc) {\r\n            doc[fieldName] = await recursivelyMapStorageUrls(\r\n              this.client.fireWrapper,\r\n              doc[fieldName]\r\n            );\r\n          }\r\n          return doc;\r\n        })\r\n      );\r\n\r\n      log('apiGetManyReferenceLazy result', {\r\n        docs: parsedData,\r\n        resource: r,\r\n        collectionPath: r.collection.path,\r\n      });\r\n\r\n      return {\r\n        data: parsedData,\r\n        total: data.length,\r\n      };\r\n    }\r\n\r\n    log('apiGetManyReferenceLazy result', {\r\n      docs: data,\r\n      resource: r,\r\n      collectionPath: r.collection.path,\r\n    });\r\n    return { data, total: data.length };\r\n  }\r\n\r\n  private async checkIfOnLastPage<TParams extends messageTypes.IParamsGetList>(\r\n    collection: CollectionReference,\r\n    params: TParams,\r\n    resourceName: string,\r\n    nextPageCursor: DocumentSnapshot\r\n  ): Promise<boolean> {\r\n    const query = await paramsToQuery(\r\n      collection,\r\n      params,\r\n      resourceName,\r\n      this.client.flogger,\r\n      {\r\n        filters: true,\r\n        sort: true,\r\n      }\r\n    );\r\n    if (!nextPageCursor) {\r\n      throw new Error('Page cursor was empty...');\r\n    }\r\n    const nextElementSnapshot = await query\r\n      .startAfter(nextPageCursor)\r\n      .limit(1)\r\n      .get();\r\n\r\n    if (!nextElementSnapshot.empty) {\r\n      // this.incrementFirebaseReadsCounter(1);\r\n    }\r\n\r\n    return nextElementSnapshot.empty;\r\n  }\r\n\r\n  public clearQueryCursors(resourceName: string) {\r\n    clearQueryCursors(resourceName);\r\n  }\r\n\r\n  private async tryGetResource(\r\n    resourceName: string,\r\n    collectionQuery?: messageTypes.CollectionQueryType\r\n  ): Promise<IResource> {\r\n    return this.rm.TryGetResourcePromise(resourceName, collectionQuery);\r\n  }\r\n}\r\n","import {\r\n  getAbsolutePath,\r\n  log,\r\n  logger,\r\n  retrieveStatusCode,\r\n  logError,\r\n  MakeFirestoreLogger,\r\n} from \"../misc\";\r\nimport * as ra from \"../misc/react-admin-models\";\r\nimport { RAFirebaseOptions } from \"./options\";\r\nimport { FirebaseWrapper } from \"./database/firebase/FirebaseWrapper\";\r\nimport { FireApp } from \"./database/firebase/IFirebaseWrapper\";\r\nimport { FireClient } from \"./database/FireClient\";\r\nimport { GetList, GetMany, GetManyReference, GetOne } from \"./queries\";\r\nimport { Create, Delete, DeleteMany, Update, UpdateMany } from \"./commands\";\r\n\r\nexport interface IDataProvider extends ra.DataProvider {\r\n  app: FireApp;\r\n}\r\n\r\nexport function DataProvider(\r\n  firebaseConfig: {},\r\n  optionsInput?: RAFirebaseOptions\r\n): IDataProvider {\r\n  const options = optionsInput || {};\r\n  verifyDataProviderArgs(firebaseConfig, options);\r\n\r\n  const flogger = MakeFirestoreLogger(options);\r\n  logger.SetEnabled(!!options?.logging);\r\n  flogger.SetEnabled(!!options?.firestoreCostsLogger?.enabled);\r\n  flogger.ResetCount(!options?.firestoreCostsLogger?.persistCount);\r\n  log('Creating FirebaseDataProvider', {\r\n    firebaseConfig,\r\n    options\r\n  });\r\n\r\n  const fireWrapper = new FirebaseWrapper();\r\n  fireWrapper.init(firebaseConfig, optionsInput);\r\n\r\n  async function run<T>(cb: () => Promise<T>) {\r\n    let res: any;\r\n    try {\r\n      res = await cb();\r\n      return res;\r\n    } catch (error) {\r\n      const errorMsg = error.toString();\r\n      const code = retrieveStatusCode(errorMsg);\r\n      const errorObj = { status: code, message: errorMsg, json: res };\r\n      logError(\"DataProvider:\", error, { errorMsg, code, errorObj });\r\n      throw errorObj;\r\n    }\r\n  }\r\n  const client = new FireClient(fireWrapper, options, flogger);\r\n\r\n  const newProviderApi: IDataProvider = {\r\n    app: fireWrapper.GetApp(),\r\n    getList<RecordType extends ra.Record = ra.Record>(\r\n      resource: string,\r\n      params: ra.GetListParams\r\n    ): Promise<ra.GetListResult<RecordType>> {\r\n      return run(() => GetList<RecordType>(resource, params, client));\r\n    },\r\n    getOne<RecordType extends ra.Record = ra.Record>(\r\n      resource: string,\r\n      params: ra.GetOneParams\r\n    ): Promise<ra.GetOneResult<RecordType>> {\r\n      return run(() => GetOne<RecordType>(resource, params, client));\r\n    },\r\n    getMany<RecordType extends ra.Record = ra.Record>(\r\n      resource: string,\r\n      params: ra.GetManyParams\r\n    ): Promise<ra.GetManyResult<RecordType>> {\r\n      return run(() => GetMany<RecordType>(resource, params, client));\r\n    },\r\n    getManyReference<RecordType extends ra.Record = ra.Record>(\r\n      resource: string,\r\n      params: ra.GetManyReferenceParams\r\n    ): Promise<ra.GetManyReferenceResult<RecordType>> {\r\n      return run(() =>\r\n        GetManyReference<RecordType>(resource, params, client)\r\n      );\r\n    },\r\n    update<RecordType extends ra.Record = ra.Record>(\r\n      resource: string,\r\n      params: ra.UpdateParams\r\n    ): Promise<ra.UpdateResult<RecordType>> {\r\n      return run(() => Update<RecordType>(resource, params, client));\r\n    },\r\n    updateMany(\r\n      resource: string,\r\n      params: ra.UpdateManyParams\r\n    ): Promise<ra.UpdateManyResult> {\r\n      return run(() => UpdateMany(resource, params, client));\r\n    },\r\n    create<RecordType extends ra.Record = ra.Record>(\r\n      resource: string,\r\n      params: ra.CreateParams\r\n    ): Promise<ra.CreateResult<RecordType>> {\r\n      return run(() => Create<RecordType>(resource, params, client));\r\n    },\r\n    delete<RecordType extends ra.Record = ra.Record>(\r\n      resource: string,\r\n      params: ra.DeleteParams\r\n    ): Promise<ra.DeleteResult<RecordType>> {\r\n      return run(() => Delete(resource, params, client));\r\n    },\r\n    deleteMany(\r\n      resource: string,\r\n      params: ra.DeleteManyParams\r\n    ): Promise<ra.DeleteManyResult> {\r\n      return run(() => DeleteMany(resource, params, client));\r\n    },\r\n  };\r\n\r\n  return newProviderApi;\r\n}\r\n\r\nfunction verifyDataProviderArgs(\r\n  firebaseConfig: {},\r\n  options?: RAFirebaseOptions\r\n) {\r\n  const hasNoApp = !options || !options.app;\r\n  const hasNoConfig = !firebaseConfig;\r\n  if (hasNoConfig && hasNoApp) {\r\n    throw new Error(\r\n      'Please pass the Firebase firebaseConfig object or options.app to the FirebaseAuthProvider'\r\n    );\r\n  }\r\n  if (options && options.rootRef) {\r\n    // Will throw error if rootRef doesn't point to a document\r\n    getAbsolutePath(options.rootRef, 'test');\r\n  }\r\n}\r\n","// From firebase SDK\r\n\r\nimport { logError } from \"./logger\";\r\n\r\n// - https://github.com/firebase/firebase-js-sdk/blob/9f109f85ad0d99f6c13e68dcb549a0b852e35a2a/packages/functions/src/api/error.ts\r\nexport function retrieveStatusTxt(status: number): 'ok' | 'unauthenticated' {\r\n  // Make sure any successful status is OK.\r\n  if (status >= 200 && status < 300) {\r\n    return 'ok';\r\n  }\r\n  switch (status) {\r\n    case 401: // 'unauthenticated'\r\n    case 403: // 'permission-denied'\r\n      return 'unauthenticated';\r\n\r\n    case 0: // 'internal'\r\n    case 400: // 'invalid-argument'\r\n    case 404: // 'not-found'\r\n    case 409: // 'aborted'\r\n    case 429: // 'resource-exhausted'\r\n    case 499: // 'cancelled'\r\n    case 500: // 'internal'\r\n    case 501: // 'unimplemented'\r\n    case 503: // 'unavailable'\r\n    case 504: // 'deadline-exceeded'\r\n    default:\r\n      // ignore\r\n      return 'ok';\r\n  }\r\n}\r\n\r\n// From firebase SDK\r\n// tslint:disable-next-line:max-line-length\r\n// - https://github.com/firebase/firebase-js-sdk/blob/9f109f85ad0d99f6c13e68dcb549a0b852e35a2a/packages/functions/src/api/error.ts\r\nexport function retrieveStatusCode(statusTxt: string): number {\r\n  // Make sure any successful status is OK.\r\n  const regexResult = /\\[code\\=([\\w-]*)/g.exec(statusTxt);\r\n  const status = Array.isArray(regexResult) && regexResult[1];\r\n  if (!status) {\r\n    logError('unknown StatusCode ', {statusTxt});\r\n  }\r\n  switch (status) {\r\n    case 'unauthenticated':\r\n      return 401;\r\n    case 'permission-denied':\r\n      return 403;\r\n    case 'internal':\r\n      return 0;\r\n    case 'invalid-argument':\r\n      return 400;\r\n    case 'not-found':\r\n      return 404;\r\n    case 'aborted':\r\n      return 409;\r\n    case 'resource-exhausted':\r\n      return 429;\r\n    case 'cancelled':\r\n      return 499;\r\n    case 'internal':\r\n      return 500;\r\n    case 'unimplemented':\r\n      return 501;\r\n    case 'unavailable':\r\n      return 503;\r\n    case 'deadline-exceeded':\r\n      return 504;\r\n    default:\r\n      return 200;\r\n  }\r\n}\r\n","import { FireClient } from '../database/FireClient';\r\nimport { FirebaseLazyLoadingClient } from '../lazy-loading/FirebaseLazyLoadingClient';\r\nimport {\r\n  filterArray,\r\n  log,\r\n  recursivelyMapStorageUrls,\r\n  sortArray,\r\n} from '../../misc';\r\nimport * as ra from '../../misc/react-admin-models';\r\n\r\nexport async function GetList<T extends ra.Record>(\r\n  resourceName: string,\r\n  params: ra.GetListParams,\r\n  client: FireClient\r\n): Promise<ra.GetListResult<T>> {\r\n  log('GetList', { resourceName, params });\r\n  const { rm, fireWrapper, options } = client;\r\n\r\n  if (options?.lazyLoading?.enabled) {\r\n    const lazyClient = new FirebaseLazyLoadingClient(\r\n      options,\r\n      rm,\r\n      client\r\n    );\r\n    return lazyClient.apiGetList<T>(resourceName, params);\r\n  }\r\n\r\n  const filterSafe = params.filter || {};\r\n\r\n  const collectionQuery = filterSafe.collectionQuery;\r\n  delete filterSafe.collectionQuery;\r\n\r\n  const r = await rm.TryGetResource(resourceName, 'REFRESH', collectionQuery);\r\n  const data = r.list;\r\n  if (params.sort != null) {\r\n    const { field, order } = params.sort;\r\n    if (order === 'ASC') {\r\n      sortArray(data, field, 'asc');\r\n    } else {\r\n      sortArray(data, field, 'desc');\r\n    }\r\n  }\r\n  let softDeleted = data;\r\n  if (options.softDelete && !Object.keys(filterSafe).includes('deleted')) {\r\n    softDeleted = data.filter((doc) => !doc.deleted);\r\n  }\r\n  const filteredData = filterArray(softDeleted, filterSafe);\r\n  const pageStart = (params.pagination.page - 1) * params.pagination.perPage;\r\n  const pageEnd = pageStart + params.pagination.perPage;\r\n  const dataPage = filteredData.slice(pageStart, pageEnd) as T[];\r\n  const total = filteredData.length;\r\n\r\n  if (options.relativeFilePaths) {\r\n    const data = await Promise.all(\r\n      dataPage.map((doc) => recursivelyMapStorageUrls(fireWrapper, doc))\r\n    );\r\n    return {\r\n      data,\r\n      total,\r\n    };\r\n  }\r\n\r\n  return {\r\n    data: dataPage,\r\n    total,\r\n  };\r\n}\r\n","import { FireClient } from '../database/FireClient';\r\nimport { log, recursivelyMapStorageUrls } from '../../misc';\r\nimport * as ra from '../../misc/react-admin-models';\r\n\r\nexport async function GetOne<T extends ra.Record>(\r\n  resourceName: string,\r\n  params: ra.GetOneParams,\r\n  client: FireClient\r\n): Promise<ra.GetOneResult<T>> {\r\n  log('GetOne', { resourceName, params });\r\n  const { rm, fireWrapper } = client;\r\n  try {\r\n    const id = params.id + '';\r\n    const dataSingle = await rm.GetSingleDoc(resourceName, id);\r\n    client.flogger.logDocument(1)();\r\n    const data = await recursivelyMapStorageUrls(fireWrapper, dataSingle);\r\n    return { data: data };\r\n  } catch (error) {\r\n    throw new Error(\r\n      'Error getting id: ' + params.id + ' from collection: ' + resourceName\r\n    );\r\n  }\r\n}\r\n","import { FireClient } from '../database/FireClient';\r\nimport { log, recursivelyMapStorageUrls } from '../../misc';\r\nimport * as ra from '../../misc/react-admin-models';\r\n\r\nexport async function GetMany<T extends ra.Record>(\r\n  resourceName: string,\r\n  params: ra.GetManyParams,\r\n  client: FireClient\r\n): Promise<ra.GetManyResult<T>> {\r\n  const { rm, options, fireWrapper } = client;\r\n  const r = await rm.TryGetResource(resourceName);\r\n  log('GetMany', { resourceName, resource: r, params });\r\n  const ids = params.ids;\r\n  const matchDocSnaps = await Promise.all(\r\n    ids.map((id) => r.collection.doc(id + '').get())\r\n  );\r\n  client.flogger.logDocument(ids.length)();\r\n  const matches = matchDocSnaps.map((snap) => {\r\n    return { ...snap.data(), id: snap.id } as T;\r\n  });\r\n  const permittedData = options.softDelete\r\n    ? matches.filter((row) => !row['deleted'])\r\n    : matches;\r\n  if (options.relativeFilePaths) {\r\n    const data = await Promise.all(\r\n      permittedData.map((doc) => recursivelyMapStorageUrls(fireWrapper, doc))\r\n    );\r\n    return {\r\n      data,\r\n    };\r\n  }\r\n\r\n  return {\r\n    data: permittedData,\r\n  };\r\n}\r\n","import { FireClient } from \"../database/FireClient\";\r\nimport { filterArray, log, recursivelyMapStorageUrls, sortArray } from \"../../misc\";\r\nimport * as ra from \"../../misc/react-admin-models\";\r\n\r\nexport async function GetManyReference<T extends ra.Record>(\r\n  resourceName: string,\r\n  params: ra.GetManyReferenceParams,\r\n  client: FireClient\r\n): Promise<ra.GetManyReferenceResult<T>> {\r\n  const { rm, options, fireWrapper } = client;\r\n  log(\"GetManyReference\", { resourceName, params });\r\n  const filterSafe = params.filter || {};\r\n  const collectionQuery = filterSafe.collectionQuery;\r\n  const r = await rm.TryGetResource(\r\n    resourceName,\r\n    \"REFRESH\",\r\n    collectionQuery\r\n  );\r\n  delete filterSafe.collectionQuery;\r\n  log(\"apiGetManyReference\", { resourceName, resource: r, params });\r\n  const data = r.list;\r\n  const targetField = params.target;\r\n  const targetValue = params.id;\r\n  let softDeleted = data;\r\n  if (options.softDelete) {\r\n    softDeleted = data.filter(doc => !doc['deleted'])\r\n  }\r\n  const filteredData = filterArray(softDeleted, filterSafe);\r\n  const targetIdFilter = {} as any;\r\n  targetIdFilter[targetField] = targetValue;\r\n  const permittedData = filterArray(filteredData, targetIdFilter);\r\n  if (params.sort != null) {\r\n    const { field, order } = params.sort;\r\n    if (order === \"ASC\") {\r\n      sortArray(permittedData, field, \"asc\");\r\n    } else {\r\n      sortArray(permittedData, field, \"desc\");\r\n    }\r\n  }\r\n  const pageStart = (params.pagination.page - 1) * params.pagination.perPage;\r\n  const pageEnd = pageStart + params.pagination.perPage;\r\n  const dataPage = permittedData.slice(pageStart, pageEnd) as T[];\r\n  const total = permittedData.length;\r\n\r\n  if (options.relativeFilePaths) {\r\n    const data = await Promise.all(\r\n      permittedData.map((doc) =>\r\n        recursivelyMapStorageUrls(fireWrapper, doc)\r\n      )\r\n    );\r\n    return { data, total };\r\n  }\r\n\r\n  return { data: dataPage, total };\r\n}\r\n","import { FireClient } from \"../database/FireClient\";\r\nimport { log } from \"../../misc\";\r\nimport * as ra from \"../../misc/react-admin-models\";\r\n\r\nexport async function Update<T extends ra.Record>(\r\n  resourceName: string,\r\n  params: ra.UpdateParams,\r\n  client: FireClient\r\n): Promise<ra.UpdateResult<T>> {\r\n  const { rm } = client;\r\n  log(\"Update\", { resourceName, params });\r\n  const id = params.id + \"\";\r\n  delete params.data.id;\r\n  const r = await rm.TryGetResource(resourceName);\r\n  log(\"Update\", { resourceName, resource: r, params });\r\n  const data = await client.parseDataAndUpload(r, id, params.data);\r\n  const docObj = { ...data };\r\n  client.checkRemoveIdField(docObj, id);\r\n  await client.addUpdatedByFields(docObj);\r\n  await r.collection.doc(id).update(docObj);\r\n  return {\r\n    data: {\r\n      ...data,\r\n      id: id,\r\n    },\r\n  };\r\n}\r\n","import { FireClient } from \"../database/FireClient\";\r\nimport { log } from \"../../misc\";\r\nimport * as ra from \"../../misc/react-admin-models\";\r\n\r\nexport async function UpdateMany(\r\n  resourceName: string,\r\n  params: ra.UpdateManyParams,\r\n  client: FireClient\r\n): Promise<ra.UpdateManyResult> {\r\n  const { rm } = client;\r\n  log(\"UpdateMany\", { resourceName, params });\r\n  delete params.data.id;\r\n  const r = await rm.TryGetResource(resourceName);\r\n  log(\"UpdateMany\", { resourceName, resource: r, params });\r\n  const ids = params.ids;\r\n  const returnData = await Promise.all(\r\n    ids.map(async id => {\r\n      const idStr = id+'';\r\n      const data = await client.parseDataAndUpload(r, idStr, params.data);\r\n      const docObj = { ...data };\r\n      client.checkRemoveIdField(docObj, idStr);\r\n      await client.addUpdatedByFields(docObj);\r\n      await r.collection\r\n        .doc(idStr)\r\n        .update(docObj);\r\n      return {\r\n        ...data,\r\n        id: idStr\r\n      };\r\n    })\r\n  );\r\n  return {\r\n    data: returnData\r\n  };\r\n}\r\n","import { FireClient } from \"../database/FireClient\";\r\nimport { log } from \"../../misc\";\r\nimport * as ra from \"../../misc/react-admin-models\";\r\n\r\nexport async function Create<T extends ra.Record>(\r\n  resourceName: string,\r\n  params: ra.CreateParams,\r\n  client: FireClient\r\n): Promise<ra.CreateResult<T>> {\r\n  const { rm, fireWrapper } = client;\r\n  const r = await rm.TryGetResource(resourceName);\r\n  log(\"Create\", { resourceName, resource: r, params });\r\n  const hasOverridenDocId = params.data && params.data.id;\r\n  log(\"Create\", { hasOverridenDocId });\r\n  if (hasOverridenDocId) {\r\n    const overridenId = params.data.id;\r\n    const exists = (await r.collection.doc(overridenId).get()).exists;\r\n    if (exists) {\r\n      throw new Error(\r\n        `the id:\"${overridenId}\" already exists, please use a unique string if overriding the 'id' field`\r\n      );\r\n    }\r\n    const data = await client.parseDataAndUpload(r, overridenId, params.data);\r\n    if (!overridenId) {\r\n      throw new Error(\"id must be a valid string\");\r\n    }\r\n    const docObj = { ...data };\r\n    client.checkRemoveIdField(docObj, overridenId);\r\n    await client.addCreatedByFields(docObj);\r\n    await client.addUpdatedByFields(docObj);\r\n    log(\"Create\", { docObj });\r\n    await r.collection.doc(overridenId).set(docObj, { merge: false });\r\n    return {\r\n      data: {\r\n        ...data,\r\n        id: overridenId,\r\n      },\r\n    };\r\n  }\r\n  const newId = fireWrapper.db().collection(\"collections\").doc().id;\r\n  const data = await client.parseDataAndUpload(r, newId, params.data);\r\n  const docObj = { ...data };\r\n  client.checkRemoveIdField(docObj, newId);\r\n  await client.addCreatedByFields(docObj);\r\n  await client.addUpdatedByFields(docObj);\r\n  await r.collection.doc(newId).set(docObj, { merge: false });\r\n  return {\r\n    data: {\r\n      ...data,\r\n      id: newId,\r\n    },\r\n  };\r\n}\r\n","import { FireClient } from \"../database/FireClient\";\r\nimport { log } from \"../../misc\";\r\nimport * as ra from \"../../misc/react-admin-models\";\r\nimport { DeleteSoft } from \"./Delete.Soft\";\r\n\r\nexport async function Delete<T extends ra.Record>(\r\n  resourceName: string,\r\n  params: ra.DeleteParams,\r\n  client: FireClient\r\n): Promise<ra.DeleteResult<T>> {\r\n  const { rm, options } = client;\r\n  if (options.softDelete) {\r\n    return DeleteSoft(resourceName, params, client);\r\n  }\r\n  const r = await rm.TryGetResource(resourceName);\r\n  log(\"apiDelete\", { resourceName, resource: r, params });\r\n  try {\r\n    const id = params.id + \"\";\r\n    await r.collection.doc(id).delete();\r\n  } catch (error) {\r\n    throw new Error(error);\r\n  }\r\n  return {\r\n    data: params.previousData as T,\r\n  };\r\n}\r\n","import { FireClient } from \"../database/FireClient\";\r\nimport { log, logError } from \"../../misc\";\r\nimport * as ra from \"../../misc/react-admin-models\";\r\n\r\nexport async function DeleteSoft<T extends ra.Record>(\r\n  resourceName: string,\r\n  params: ra.DeleteParams,\r\n  client: FireClient\r\n): Promise<ra.DeleteResult<T>> {\r\n  const { rm } = client;\r\n  const id = params.id + \"\";\r\n  const r = await rm.TryGetResource(resourceName);\r\n  log(\"DeleteSoft\", { resourceName, resource: r, params });\r\n  const docObj = { deleted: true };\r\n  await client.addUpdatedByFields(docObj);\r\n  r.collection\r\n    .doc(id)\r\n    .update(docObj)\r\n    .catch((error) => {\r\n      logError(\"DeleteSoft error\", { error });\r\n    });\r\n  return {\r\n    data: params.previousData as T,\r\n  };\r\n}\r\n","import { FireClient } from \"../database/FireClient\";\r\nimport { log } from \"../../misc\";\r\nimport * as ra from \"../../misc/react-admin-models\";\r\nimport { DeleteManySoft } from \"./DeleteMany.Soft\";\r\n\r\ntype DocumentRef = firebase.firestore.DocumentReference<any>;\r\n\r\nexport async function DeleteMany(\r\n  resourceName: string,\r\n  params: ra.DeleteManyParams,\r\n  client: FireClient\r\n): Promise<ra.DeleteManyResult> {\r\n  const { options, rm, fireWrapper } = client;\r\n  if (options.softDelete) {\r\n    return DeleteManySoft(resourceName, params, client);\r\n  }\r\n  const r = await rm.TryGetResource(resourceName);\r\n  log(\"DeleteMany\", { resourceName, resource: r, params });\r\n  const returnData: ra.Identifier[] = [];\r\n  const batch = fireWrapper.db().batch();\r\n  for (const id of params.ids) {\r\n    const idStr = id + '';\r\n    const docToDelete = r.collection.doc(idStr) as DocumentRef;\r\n    batch.delete(docToDelete);\r\n    returnData.push(id);\r\n  }\r\n  try {\r\n    await batch.commit();\r\n  } catch (error) {\r\n    throw new Error(error)\r\n  }\r\n  return { data: returnData };\r\n}\r\n","import { FireClient } from \"../database/FireClient\";\r\nimport { log, logError } from \"../../misc\";\r\nimport * as ra from \"../../misc/react-admin-models\";\r\n\r\nexport async function DeleteManySoft(\r\n  resourceName: string,\r\n  params: ra.DeleteManyParams,\r\n  client: FireClient\r\n): Promise<ra.DeleteManyResult> {\r\n  const { rm } = client;\r\n  const r = await rm.TryGetResource(resourceName);\r\n  log(\"DeleteManySoft\", { resourceName, resource: r, params });\r\n  const ids = params.ids;\r\n  const returnData = await Promise.all(\r\n    ids.map(async (id) => {\r\n      const idStr = id + \"\";\r\n      const docObj = { deleted: true };\r\n      await client.addUpdatedByFields(docObj);\r\n      r.collection\r\n        .doc(idStr)\r\n        .update(docObj)\r\n        .catch((error) => {\r\n          logError(\"apiSoftDeleteMany error\", { error });\r\n        });\r\n      return idStr;\r\n    })\r\n  );\r\n  return {\r\n    data: returnData,\r\n  };\r\n}\r\n","import { messageTypes } from './../misc/messageTypes';\r\nimport firebase from 'firebase/app';\r\nimport 'firebase/auth';\r\nimport { FirebaseAuth, User } from '@firebase/auth-types';\r\nimport { log, retrieveStatusTxt, logWarn, logger } from '../misc';\r\nimport { RAFirebaseOptions } from './options';\r\nimport { FirebaseWrapper } from './database/firebase/FirebaseWrapper';\r\nimport {\r\n  AuthProvider as RaAuthProvider,\r\n  UserIdentity,\r\n} from '../misc/react-admin-models';\r\n\r\nclass AuthClient {\r\n  private auth: FirebaseAuth;\r\n\r\n  constructor(firebaseConfig: {}, optionsInput?: RAFirebaseOptions) {\r\n    const options = optionsInput || {};\r\n    log('Auth Client: initializing...', { firebaseConfig, options });\r\n    const fireWrapper = new FirebaseWrapper();\r\n    fireWrapper.init(firebaseConfig, options);\r\n    this.auth = fireWrapper.auth();\r\n    options.persistence && this.setPersistence(options.persistence);\r\n  }\r\n\r\n  setPersistence(persistenceInput: 'session' | 'local' | 'none') {\r\n    let persistenceResolved: string;\r\n    switch (persistenceInput) {\r\n      case 'local':\r\n        persistenceResolved = firebase.auth.Auth.Persistence.LOCAL;\r\n        break;\r\n      case 'none':\r\n        persistenceResolved = firebase.auth.Auth.Persistence.NONE;\r\n        break;\r\n      case 'session':\r\n      default:\r\n        persistenceResolved = firebase.auth.Auth.Persistence.SESSION;\r\n        break;\r\n    }\r\n    log('setPersistence', { persistenceInput, persistenceResolved });\r\n    this.auth\r\n      .setPersistence(persistenceResolved)\r\n      .catch((error) => console.error(error));\r\n  }\r\n\r\n  public async HandleAuthLogin(params: { username: string; password: string }) {\r\n    const { username, password } = params;\r\n\r\n    if (username && password) {\r\n      try {\r\n        const user = await this.auth.signInWithEmailAndPassword(\r\n          username,\r\n          password\r\n        );\r\n        log('HandleAuthLogin: user sucessfully logged in', { user });\r\n        return user;\r\n      } catch (e) {\r\n        log('HandleAuthLogin: invalid credentials', { params });\r\n        throw new Error('Login error: invalid credentials');\r\n      }\r\n    } else {\r\n      return this.getUserLogin();\r\n    }\r\n  }\r\n\r\n  public HandleAuthLogout() {\r\n    return this.auth.signOut();\r\n  }\r\n\r\n  public HandleAuthError(errorHttp: messageTypes.HttpErrorType) {\r\n    log('HandleAuthLogin: invalid credentials', { errorHttp });\r\n    const status = !!errorHttp && errorHttp.status;\r\n    const statusTxt = retrieveStatusTxt(status);\r\n    if (statusTxt === 'ok') {\r\n      log('API is actually authenticated');\r\n      return Promise.resolve();\r\n    }\r\n    logWarn('Recieved authentication error from API');\r\n    return Promise.reject();\r\n  }\r\n\r\n  public async HandleAuthCheck(): Promise<void> {\r\n    return this.getUserLogin() as any; // Prevents breaking change\r\n  }\r\n\r\n  public getUserLogin(): Promise<User> {\r\n    return new Promise((resolve, reject) => {\r\n      if (this.auth.currentUser) return resolve(this.auth.currentUser);\r\n      const unsubscribe = this.auth.onAuthStateChanged((user) => {\r\n        unsubscribe();\r\n        if (user) {\r\n          resolve(user);\r\n        } else {\r\n          reject();\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  public async HandleGetPermissions() {\r\n    try {\r\n      const user = await this.getUserLogin();\r\n      // @ts-ignore\r\n      const token = await user.getIdTokenResult();\r\n\r\n      return token.claims;\r\n    } catch (e) {\r\n      log('HandleGetPermission: no user is logged in or tokenResult error', {\r\n        e,\r\n      });\r\n      return null;\r\n    }\r\n  }\r\n\r\n  public async HandleGetIdentity(): Promise<UserIdentity> {\r\n    try {\r\n      const { uid, displayName, photoURL } = await this.getUserLogin();\r\n      const identity: UserIdentity = {\r\n        id: uid,\r\n        fullName: `${displayName ?? ''}`,\r\n        avatar: `${photoURL ?? ''}`,\r\n      };\r\n      return identity;\r\n    } catch (e) {\r\n      log('HandleGetIdentity: no user is logged in', {\r\n        e,\r\n      });\r\n      return null as any;\r\n    }\r\n  }\r\n\r\n  public async HandleGetJWTAuthTime() {\r\n    try {\r\n      const user = await this.getUserLogin();\r\n      // @ts-ignore\r\n      const token = await user.getIdTokenResult();\r\n\r\n      return token.authTime;\r\n    } catch (e) {\r\n      log('HandleGetJWTAuthTime: no user is logged in or tokenResult error', {\r\n        e,\r\n      });\r\n      return null;\r\n    }\r\n  }\r\n\r\n  public async HandleGetJWTExpirationTime() {\r\n    try {\r\n      const user = await this.getUserLogin();\r\n      // @ts-ignore\r\n      const token = await user.getIdTokenResult();\r\n\r\n      return token.expirationTime;\r\n    } catch (e) {\r\n      log(\r\n        'HandleGetJWTExpirationTime: no user is logged in or tokenResult error',\r\n        {\r\n          e,\r\n        }\r\n      );\r\n      return null;\r\n    }\r\n  }\r\n\r\n  public async HandleGetJWTSignInProvider() {\r\n    try {\r\n      const user = await this.getUserLogin();\r\n      // @ts-ignore\r\n      const token = await user.getIdTokenResult();\r\n\r\n      return token.signInProvider;\r\n    } catch (e) {\r\n      log(\r\n        'HandleGetJWTSignInProvider: no user is logged in or tokenResult error',\r\n        {\r\n          e,\r\n        }\r\n      );\r\n      return null;\r\n    }\r\n  }\r\n\r\n  public async HandleGetJWTIssuedAtTime() {\r\n    try {\r\n      const user = await this.getUserLogin();\r\n      // @ts-ignore\r\n      const token = await user.getIdTokenResult();\r\n\r\n      return token.issuedAtTime;\r\n    } catch (e) {\r\n      log(\r\n        'HandleGetJWTIssuedAtTime: no user is logged in or tokenResult error',\r\n        {\r\n          e,\r\n        }\r\n      );\r\n      return null;\r\n    }\r\n  }\r\n\r\n  public async HandleGetJWTToken() {\r\n    try {\r\n      const user = await this.getUserLogin();\r\n      // @ts-ignore\r\n      const token = await user.getIdTokenResult();\r\n\r\n      return token.token;\r\n    } catch (e) {\r\n      log(\r\n        'HandleGetJWTIssuedAtTime: no user is logged in or tokenResult error',\r\n        {\r\n          e,\r\n        }\r\n      );\r\n      return null;\r\n    }\r\n  }\r\n}\r\n\r\nexport function AuthProvider(\r\n  firebaseConfig: {},\r\n  options: RAFirebaseOptions\r\n): RaAuthProvider {\r\n  VerifyAuthProviderArgs(firebaseConfig, options);\r\n  logger.SetEnabled(!!options?.logging);\r\n  const auth = new AuthClient(firebaseConfig, options);\r\n\r\n  const provider: RaAuthProvider = {\r\n    // React Admin Interface\r\n    login: (params) => auth.HandleAuthLogin(params),\r\n    logout: () => auth.HandleAuthLogout(),\r\n    checkAuth: () => auth.HandleAuthCheck(),\r\n    checkError: (error) => auth.HandleAuthError(error),\r\n    getPermissions: () => auth.HandleGetPermissions(),\r\n    getIdentity: () => auth.HandleGetIdentity(),\r\n    // Custom Functions\r\n    getAuthUser: () => auth.getUserLogin(),\r\n    getJWTAuthTime: () => auth.HandleGetJWTAuthTime(),\r\n    getJWTExpirationTime: () => auth.HandleGetJWTExpirationTime(),\r\n    getJWTSignInProvider: () => auth.HandleGetJWTSignInProvider(),\r\n    getJWTClaims: () => auth.HandleGetPermissions(),\r\n    getJWTToken: () => auth.HandleGetJWTToken(),\r\n  };\r\n  return provider;\r\n}\r\n\r\nfunction VerifyAuthProviderArgs(\r\n  firebaseConfig: {},\r\n  options: RAFirebaseOptions\r\n) {\r\n  const hasNoApp = !options || !options.app;\r\n  const hasNoConfig = !firebaseConfig;\r\n  if (hasNoConfig && hasNoApp) {\r\n    throw new Error(\r\n      'Please pass the Firebase firebaseConfig object or options.app to the FirebaseAuthProvider'\r\n    );\r\n  }\r\n}\r\n"],"names":["parseAllDatesDoc","obj","Object","keys","map","key","recusivelyCheckObjectValue","input","toDate","Array","isArray","value","parseFireStoreDocument","doc","data","id","sortArray","field","dir","sort","a","b","rawA","get","rawB","isAsc","Number","isFinite","basicSort","toLowerCase","Date","aValue","bValue","filterArray","searchFields","isEmpty","searchObjs","fieldName","getSubObjects","searchField","searchValue","tree","leaves","recursivelyWalk","path","hasOwnProperty","objVal","currentPath","push","objectFlatten","getFieldReferences","filter","row","reduce","acc","cur","searchThis","toString","includes","doesRowMatch","LogNoOp","args","LoggerBase","constructor","title","cacheEnabledKey","this","isEnabled","localStorage","getItem","SetEnabled","setItem","removeItem","log","console","bind","warn","error","logger","logError","logWarn","KEY_SINGLE","recursivelyMapStorageUrls","async","fireWrapper","fieldValue","isObject","src","startsWith","ref","storage","getDownloadURL","i","length","getAbsolutePath","rootRef","relativePath","Error","rootRefValue","withSlashes","join","split","slice","joinPaths","FirebaseWrapper","GetApp","app","init","firebaseConfig","options","optionsSafe","firebase","ObtainFirebaseApp","firestore","db","serverTimestamp","auth","[object Object]","Promise","resolve","reject","onAuthStateChanged","user","OnUserLogout","callBack","isLoggedOut","ResourceManager","flogger","resources","resourceName","refresh","collectionQuery","RefreshResource","TryGetResourcePromise","GetResource","resource","initPath","_this$options","lazyLoading","_this$options$lazyLoa","enabled","collection","query","applyQuery","newDocs","list","docs","logDocument","collectionPath","docId","docSnap","exists","result","absolutePath","hasBeenInited","pathAbsolute","allResources","associateUsersById","getCurrentUserId","getCurrentUserEmail","GetUserLogin","email","uid","collRef","FireClient","rm","checkRemoveIdField","dontAddIdFieldToDoc","r","docPath","uploads","recusivelyParseObjectValue","fieldPath","index","fieldDotsPath","fieldSlashesPath","rawFile","parseDocGetAllUploads","all","u","link","_this","uploadAndGetLink","useFileNamesInStorage","set","disableMeta","currentUserIdentifier","getUserIdentifier","createAtSelector","renameMetaFields","created_at","casing","metaFieldCasing","GetSelectorsCreateAt","createBySelector","created_by","GetSelectorsCreateBy","AddCreatedByFields","updateAtSelector","updated_at","GetSelectorsUpdateAt","updateBySelector","updated_by","GetSelectorsUpdateBy","AddUpdatedByFields","useFileName","storagePath","name","saveFile","task","put","taskResult","res","rej","then","catch","relativeFilePaths","storageError","code","getQueryCursor","params","btoa","JSON","stringify","defaultParamsToQueryOptions","filters","pagination","paramsToQuery","filtersStepQuery","forEach","where","sortStepQuery","order","parsedOrder","toLocaleLowerCase","orderBy","sortToQuery","page","perPage","limit","queryCursor","queryBase","lastQueryCursor","currentPage","currentPageParams","newQuery","startAt","snapshots","docsLength","findLastQueryCursor","startAfter","paginationToQuery","getFullParamsForQuery","reactAdminParams","softdeleteEnabled","deleted","FirebaseLazyLoadingClient","client","tryGetResource","softDelete","resultsCount","message","total","nextPageCursor","allCursorsKey","localCursorKeys","newCursors","parse","concat","setQueryCursor","getNextPageParams","checkIfOnLastPage","parsedData","filterWithTarget","target","_this2","empty","clearQueryCursors","cursor","DataProvider","optionsInput","verifyDataProviderArgs","ResetCount","shouldReset","docCount","_options$lazyLoading","count","incrementBy","currentCountRaw","incremented","parseInt","incrementRead","MakeFirestoreLogger","logging","firestoreCostsLogger","_options$firestoreCos","_options$firestoreCos2","persistCount","run","cb","errorMsg","statusTxt","regexResult","exec","status","retrieveStatusCode","errorObj","json","getList","apiGetList","filterSafe","TryGetResource","softDeleted","filteredData","pageStart","dataPage","GetList","getOne","dataSingle","GetSingleDoc","GetOne","getMany","ids","matchDocSnaps","matches","snap","permittedData","GetMany","getManyReference","targetField","targetValue","targetIdFilter","GetManyReference","update","parseDataAndUpload","docObj","addUpdatedByFields","Update","updateMany","idStr","UpdateMany","create","hasOverridenDocId","overridenId","addCreatedByFields","merge","newId","Create","delete","previousData","DeleteSoft","Delete","deleteMany","DeleteManySoft","returnData","batch","docToDelete","commit","DeleteMany","AuthClient","persistence","setPersistence","persistenceInput","persistenceResolved","Auth","Persistence","LOCAL","NONE","SESSION","username","password","getUserLogin","signInWithEmailAndPassword","e","HandleAuthLogout","signOut","HandleAuthError","errorHttp","retrieveStatusTxt","currentUser","unsubscribe","getIdTokenResult","claims","displayName","photoURL","fullName","avatar","authTime","expirationTime","signInProvider","issuedAtTime","token","AuthProvider","VerifyAuthProviderArgs","login","HandleAuthLogin","logout","checkAuth","HandleAuthCheck","checkError","getPermissions","HandleGetPermissions","getIdentity","HandleGetIdentity","getAuthUser","getJWTAuthTime","HandleGetJWTAuthTime","getJWTExpirationTime","HandleGetJWTExpirationTime","getJWTSignInProvider","HandleGetJWTSignInProvider","getJWTClaims","getJWTToken","HandleGetJWTToken"],"mappings":"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"}